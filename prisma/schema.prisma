generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  String?
  author    User?   @relation(fields: [authorId], references: [id])
}


model CasinoSession {
  id                    Int      @id @default(autoincrement())
  totalDebt             Float
  totalSessionDeposited Float
  totalSessionWithdrawn Float
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Todo {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String
  category  String
  done      Boolean   @default(false)
  date      DateTime?
}




model Account {
  id                String   @id @default(cuid())
  userId            String   @map(name: "user_id")
  type              String
  provider          String
  providerAccountId String   @map(name: "provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @updatedAt @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map(name: "session_token")
  userId       String   @map(name: "user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  activities    Activity[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Activity {
  id          String   @id @default(cuid())
  userId      String   @map(name: "user_id")
  name        String
  description String?
  colorCode   String   @map(name: "color_code")
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id])

  activityLogs ActivityLog[]

  @@map(name: "activities")
}

model ActivityLog {
  id         String   @id @default(cuid())
  activityId String   @map(name: "activity_id")
  date       DateTime @default(now())
  count      Int      @default(1)

  activity Activity @relation(fields: [activityId], references: [id])

  @@map(name: "activity_log")
}
